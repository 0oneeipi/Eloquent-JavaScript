= Values, Types, and Operators =

(((data)))(((bit)))(((memory)))Inside the computer's world, there is
only data. We can read data, modify data, create new data—but things
that aren't represented as data simply do not exist. All this data is
stored as long sequences of bits, and is thus fundamentally alike.

Bits can be any kinds of two-valued things, usually described as
zeroes and ones. Inside the computer, they take forms like a high or
low electrical charge, a strong or weak signal, or a shiny or dull
spot on the surface of a CD. Any piece of discrete information can be
reduced to a sequence of zeroes and ones, and thus represented in
bits.

As an example, consider the way in which the number thirteen could be
stored in bits. The way this is done is analogous to the way we write
decimal numbers, but instead of ten digits, we have only two, and
instead of the weight of a digit being ten times the weight of the
digit after it, the weight increases by a factor two. Here's thirteen,
with the weight of the digits shown below them:

----
   0   0   0   0   0   1   1   0   1
 256 128  64  32  16   8   4   2   1
----

So that's `000001101`, or `8 + 4 + 1`, equals `13`.

== Values ==

Imagine a sea of bits. An ocean of them. A typical modern computer
will have over thirty billion bits sitting in its volatile data
storage (as opposed to non-volatile storage—the hard disk or
equivalent—which tends to have yet a few orders of magnitude more).

In order to work with these without getting lost, we'll have to
structure them somehow. One way to do that is to group them into
chunks that represent a single piece of information. In a JavaScript
environment, all data is separated into things called _((value))s_,
groups of bits that represent a coherent piece of data.

Though all values are made of the same uniform stuff, they play
different roles. Every value has a ((type)), which determines the kind
of role it plays. There are six basic types of values in JavaScript:
numbers, strings, booleans, objects, functions, and undefined values.

(((garbage collection)))To create a value, one must merely invoke its
name. This is very convenient. You don't have to gather building
material for your values or pay for them; you just call for one, and
_woosh_, you have it. They are not created from thin air, of course.
Every value has to be stored somewhere, and if you want to use a
gigantic amount of them at the same time you might run out of bits.
Fortunately, this is a problem only if you need them all
simultaneously. As soon as you no longer use a value, it will
dissipate, leaving behind its bits to be recycled as building material
for the next generation of values.

== Numbers ==

(((Number type)))Values of the _number_ type are, unsurprisingly,
numeric values. In a JavaScript program, they are written as numbers
usually are:

[source,javascript]
----
144
----

(((binary)))Put that into a program, and it will cause the bit pattern
for the number 144 to come into existence inside the computer.

In order to structure memory, it is necessary to know the size of each
piece. For that reason, JavaScript uses a fixed number of bits, namely
64 of them, to store a single number value. This means that there is a
limited amount of different numbers that can be represented—there are
only so many different patterns you can make with 64 bits. The amount
of numbers that can be represented by N decimal digits is 10^N^.
Similarly, the amount of numbers that can be represented by 64 binary
digits is 2^64^, which is about 18 quintillion (an 18 with 18
zeroes after it).

That's a lot. Exponential numbers have a habit of getting big. There
was a time when memory was small and people tended to use groups of
eight or sixteen bits to represent their numbers. It was easy to
accidentally “overflow” such small numbers. Today, we have the luxury
of only worrying about that when dealing with truly astronomical
numbers.

Not all whole numbers below 18 quintillion fit in a JavaScript number
though. Those bits also store negative numbers, so one of the bits has
to be used to store the sign of the number. A bigger issue is that
nonwhole numbers must also be represented. To do this, some of the
bits are used to store the position of the decimal dot within the
number. So the actual maximum whole number that can be stored is more
in the range of nine quadrillion (15 zeroes)—which is still pleasantly
huge.

Fractional numbers are written by using a dot:

[source,javascript]
----
9.81
----

(((scientific notation)))For very big or very small numbers, one can
also use scientific notation by adding an `e`, followed by the
exponent of the number:

[source,javascript]
----
2.998e8
----

That is 2.998 × 10^8^ = 299800000.

Calculations with whole numbers (also called _((integer))s_) smaller
than the aforementioned 9 quadrillion are guaranteed to always be
precise. Unfortunately, calculations with fractional numbers are
generally not. Like π (pi) cannot be precisely expressed by a finite
amount of decimal digits, many numbers lose some precision when only
64 bits are available to store them. This is a shame, but it causes
practical problems only in very specific situations. The important
thing is to be aware of it and treat fractional digital numbers as
approximations, not as precise values.

=== Arithmetic ===

(((operator)))(((arithmetic)))(((addition)))(((multiplication)))
The main thing to do with numbers is arithmetic. Arithmetic operations
such as addition or multiplication take two number values and produce
a new number from them. Here is what they look like in JavaScript:

[source,javascript]
----
100 + 4 * 11
----

(((\* operator)))(((+ operator)))The `+` and `*` symbols are called
_operators_. The first stands for addition, and the second stands for
multiplication. Putting an operator between two values will
(((application,of operators)))apply it to those values and produce a
new value.

(((parentheses)))Does the example mean “add 4 and 100, and multiply
the result by 11,” or is the multiplication done before the adding?
As you might have guessed, the multiplication happens first. But, as
in mathematics, this can be changed by wrapping the addition in
parentheses:

[source,javascript]
----
(100 + 4) * 11
----

(((division)))(((subtraction)))(((- operator)))(((/ operator)))For
subtraction, there is the `-` operator, and division can be done with
`/`.

When operators appear together without parentheses, the order in which
they are applied is determined by the _((precedence))_ of the
operators. The example shows that multiplication comes before
addition. `/` has the same precedence as `*`. Likewise for `+` and
`-`. When multiple operators with the same precedence appear next to
each other (as in `1 - 2 + 1`), they are applied left to right.

These rules of precedence are not something you should worry about.
When in doubt, just add parentheses.

(((remainder operation)))(((% operator)))There is one more arithmetic
operator, which is possibly less familiar. The `%` symbol is used to
represent the _remainder_ operation. `X % Y` is the remainder of
dividing `X` by `Y`. For example, `314 % 100` is `14`, `10 % 3` is
`1`, and `144 % 12` is `0`. Remainder's precedence is the same as that
of multiplication and division. You'll often see this operator being
referred to as “modulo” (though that's technically not entirely
accurate).

=== Special Numbers ===

There are three special values in JavaScript that are considered to be
numbers, but don't behave like normal numbers.

The first two are `Infinity` and `-Infinity`, which are used to
represent the positive and negative infinities. `Infinity - 1` is
still `Infinity`, and so on. But don't put too much trust in this kind
of infinity-based computation, it is hardly mathematically solid, and
will quickly lead to our next special number: `NaN`.

`NaN` stands for “not a number” (though it is, contradictionally, a
value of the number type). You get it when you say `0 / 0` (zero
divided by zero), `Infinity + -Infinity`, or any number of other
numeric operations that don't yield a precise, meaningful result.

== Strings ==

(((String type)))(((textual data)))(((character)))The next basic data
type is the _string_. Strings are used to represent text. They are
written by enclosing their content in quotes:

[source,javascript]
----
'Monkeys wave goodbye'
"Patch my boat with chewing gum"
----

(((quoting (of strings))))Both single and double quotes can be used to
mark strings—as long as the quotes at the start and the end of the
string match.

(((escaping!in strings)))(((newline)))Almost anything can be put
between quotes, and JavaScript will make a string value out of it. But
a few characters are difficult. You can imagine how putting quotes
between quotes might be hard. Newlines, the things you get when you
press `enter`, can also not be put between quotes—the string has to
stay on a single line.

(((backslash)))To be able to have such characters in a string, the
following convention is used: Whenever a backslash (`\`) is found
inside quoted text, it indicates that the character after it has a
special meaning. A quote that is preceded by a backslash will not end
the string, but be part of it. When an `n` character occurs after a
backslash, it is interpreted as a newline. Similarly, a `t` after a
backslash means a tab character. Take the following string:

[source,javascript]
----
"This is the first line\nAnd this is the second"
----

The actual text contained is this:

----
This is the first line
And this is the second
----

There are, of course, situations where you want a backslash in a
string to be just a backslash, not a special code. If two backslashes
follow each other, they will collapse together, and only one will be
left in the resulting string value. This is how the string `A newline
character is written like "\n"` can be written:

[source,javascript]
----
"A newline character is written like \"\\n\"."
----

(((+ operator)))(((concatenation)))Strings cannot be divided,
multiplied, or subtracted, but the `+` operator _can_ be used on them.
It does not add, but it concatenates—it glues two strings together.
The following line will produce the string `"concatenate"`:

[source,javascript]
----
"con" + "cat" + "e" + "nate"
----

There are more ways of manipulating strings, which we will discuss
when we get to methods in REF(data).

== Unary Operators ==

(((operator)))(((typeof operator)))(((type)))Not all operators are
symbols. Some are written as words. One example is the `typeof`
operator, which produces a string value naming the type of the value
you give it:

[source,javascript]
----
typeof 4.5
→ "number"
typeof "x"
→ "string"
----

(((- operator)))(((binary operator)))(((unary operator)))The other
operators we saw all operated on two values; `typeof` takes only one.
Operators that use two values are called _binary_ operators, while
those that take one are called _unary_ operators. The minus operator
can be used both as a binary operator and a unary operator:

[source,javascript]
----
- (10 - 2)
→ -8
----

== Boolean Values ==

(((Boolean type)))(((operator)))(((true)))(((false)))Often, you will
need a value that simply distinguishes between two possiblities, “yes”
and “no”, or “on” and “off”. For this JavaScript has a _boolean_ type,
which has just two values, `true` and `false` (which are written
simply as those words).

=== Comparisons ===

Here is one way to produce boolean values:

[source,javascript]
----
3 > 2
→ true
3 < 2
→ false
----

(((> operator)))(((< operator)))(((greater than)))(((less
than)))(((comparing)))The `>` and `<` signs are the traditional symbol
for “is greater than” and “is less than.” They are binary operators,
and the result of applying them is a boolean value that indicates
whether they hold true in this case.

Strings can be compared in the same way:

[source,javascript]
----
"Aardvark" < "Zoroaster"
→ true
----

The way strings are ordered is more or less alphabetic: Uppercase
letters are always “less” than lowercase ones, so `"Z" < "a"` is
`true`, and nonalphabetic characters (`!`, “, and so on) are also
included in the ordering. The actual way in which the comparison is
done is based on the _((Unicode))_ standard. This standard assigns a
number to virtually every character one would ever need, including
characters from Greek, Arabic, Japanese, Tamil, and so on. Having such
numbers is practical for storing strings inside a computer—you can
represent them as a sequence of numbers. When comparing strings,
JavaScript goes over them from left to right, comparing the numeric
codes of the characters one by one.

(((>= operator)))(((<= operator)))(((== operator)))(((!=
operator)))Other similar operators are `>=` (“is greater than or equal
to”), `<=` (“is less than or equal to”), `==` (“is equal to”), and
`!=` (“is not equal to”).

[source,javascript]
----
"Itchy" != "Scratchy"
→ true
----

There is one value in JavaScript that is not equal to itself, and that
is `NaN` (not-a-number). This is supposed to denote the result of a
nonsense computation, and as such not equal to the result of any
_other_ nonsense computations. Thus, `NaN == NaN` is `false`.

=== Logical Operators ===

(((logical operators)))There are also some operations that can be
applied to boolean values themselves. JavaScript supports three
logical operators: _and_, _or_, and _not_. These can be used to
“reason” about booleans.

(((&& operator)))The `&&` operator represents logical _and_. It is a
binary operator, and its result is `true` only if both the values
given to it are `true`.

[source,javascript]
----
true && false
→ false
true && true
→ true
----

(((|| operator)))`||` is the logical _or_; it is `true` if either of
the values given to it is `true`:

[source,javascript]
----
false || true
→ true
false || false
→ false
----

(((negation)))(((! operator)))_Not_ is written as an exclamation mark,
`!`. It is a unary operator that flips the value given to it; `!true`
produces `false`, and `!false` gives `true`.

(((precedence)))When mixing these boolean operators with arithmetic
and other operators, it is not always obvious when parentheses are
needed. In practice, one can usually get by with knowing that of the
operators we have seen so far, `||` has the lowest precedence, then
comes `&&`, then the comparison operators (`>`, `==`, and so on), and
then the rest. This has been chosen in such a way that, in typical
expressions, such as the one below, as few parentheses as possible are
necessary.

[source,javascript]
----
1 + 1 == 2 || 10 * 10 <= 100
----

== Undefined Values ==

(((undefined)))(((null)))There are two special values, written `null`
and `undefined`, that are used to denote the absence of a meaningful
value. They are themselves values, but values that carry no
information beyond their identity.

Many operations in the language which don't produce a meaningful value
(we'll see some in the next chapter) will yield `undefined`, simply
because they have to yield _some_ value.

The difference in meaning between `undefined` and `null` is mostly
uninteresting and an accident of JavaScript's design. In the cases
where you actually have to concern yourself with these values, I
recommend treating them as interchangeable (more on that in a moment).

== Automatic Type Conversion ==

(((type conversion)))In the introduction, I mentioned that JavaScript
would go out of its way to accept almost anything you give it, even
when it is confused and wrong. For example, consider these
expressions:

[source,javascript]
----
8 * null
→ 0
"5" - 1
→ 4
"5" + 1
→ "51"
"five" * 2
→ NaN
false == 0
→ true
----

When an operator is applied to the “wrong” type of value, it will
quietly convert that value to the type it wants, using a set of rules
that often aren't what you want or expect. So the `null` in the first
expression becomes `0`, the `"5"` in the second expression becomes `5`
(from string to number), yet in the third expression, because `+` will
try string concatenation before it tries numeric addition, the `1` is
converted to `"1"` (from number to string).

When something that doesn't map to a number in an obvious way, such as
`"five"` or `undefined` is converted to a number, the value `NaN` is
produced. Further arithmetic operations on `NaN` keep on producing
`NaN`, so if you find yourself getting one of those in an unexpected
place, look for accidental type conversions.

(((== operator)))When comparing things of the same type using `==`,
the outcome is rather easy to predict—you'll get `true` when both
values are the same. But when the types differ, JavaScript uses a
complicated and confusing set of rules to determine what to do. I will
not explain them precisely, but in most cases it just tries to convert
one of the values to the type of the other value. However, when `null`
or `undefined` occurs on either side of the operator, it produces
`true` only if both sides are `null` or `undefined`.

That last piece of behavior is often very useful. When you want to
test whether a value has a real value, rather than being either `null`
or `undefined`, you can simply compare it to `null` with the `==` (or
`!=`) operator.

(((=== operator)))(((!== operator)))But what if you want to test
whether something refers to the precise value `false`? The rules for
converting strings and numbers to boolean values state that `0`,
`NaN`, and the empty string count as `false`, while all the other
values count as `true`. Because of this, expressions like `0 == false`
and `"" == false` are also `true`. For cases like this, where you do
_not_ want any automatic type conversions to happen, there are two
extra operators: `===` and `!==`. The first tests whether a value is
precisely equal to the other, and the second tests whether it is not
precisely equal. So `"" === false` is `false` as expected.

Using the three-character comparision operators defensively, to
prevent unexpected type conversions from tripping you up, is something
I recommend. Though when you are sure that the types on both sides
will be the same, or that they'll either be the same or
`null`/`undefined`, there is also no problem with using the shorter
operators.

=== Short-circuiting of && and || ===

(((|| operator)))(((&& operator)))(((operator)))The logical operators
`&&` and `||` have a peculiar way of dealing with values of different
types. They _will_ convert the value on their left side to boolean
type in order to decide what to do, but then, depending on the
operator and the result of that conversion, either return the
_original_ left-hand value, or the right-hand value.

The `||` operator will return the value to its left when that can be
converted to `true`, and the value on its right otherwise. This does
the right thing for boolean values, and will do something analogous
for values of other types. This is quite practical in some situations,
allowing the operator to be used as a way to fall back to a given
default value.

[source,javascript]
----
null || "user"
→ "user"
"Karl" || "user"
→ "Karl"
----

The `&&` operator works similarly, but the other way around. When the
value to its left is something converts to `false`, it returns that
value, and otherwise it returns the value on its right.

(((shortcut evaluation)))Another important property of these two
operators is that the expression to their right is evaluated only when
necessary. In the case of `true || X`, no matter what `X` is, it might
even be an expression that destroys the universe or makes daemons fly
out of your nose, the result will be `true`, and `X` is never
evaluated. The same goes for `false && X`, which is `false`, no matter
what `X` does.
